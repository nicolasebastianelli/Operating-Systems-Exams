#include <fcntl.h>
#include <stdio.h>
#include <unistd.h>
#include <signal.h>
#include <stdlib.h>
#include <string.h>
#include <sys/wait.h>
#include <time.h>

#define READ 0
#define WRITE 1

void handlerp(int sig);
int fdpipe[4][2],i;
int main(int argc, char* argv[]) {
	int fd, M, TOP, pid[4],counto,pid0;
	char buff[255],a;
	printf("[%d]: Inizio esecuzione\n\n", getpid());
	if (argc != 4) {
		fprintf(stderr, "Numero di argomenti errato\n");
		exit(EXIT_FAILURE);
	}
	if (argv[1][0] != '/') {
		fprintf(stderr, "File con nome non assoluto\n");
		exit(EXIT_FAILURE);
	}
	if ((fd = open(argv[1], O_RDONLY)) < 0) {
		fprintf(stderr, "errore nell'apertura di file input\n");
		exit(EXIT_FAILURE);
	}
	if ((M = atoi(argv[2])) <= 0 || ((M = atoi(argv[2])) % 4) != 0) {
		fprintf(stderr, "M <= 0 o non è un numero o non è multiplo di 4\n");
		exit(EXIT_FAILURE);
	}
	if ((TOP = atoi(argv[3])) <= 0) {
		fprintf(stderr, "TOP <= 0 o non è un numero\n");
		exit(EXIT_FAILURE);
	}
	pid0=getpid();
	for (int i = 0; i < 4; i++) {
		if (pipe(fdpipe[i]) != 0) {
			fprintf(stderr, "errore nella creazione della pipe %d\n", i);
			exit(EXIT_FAILURE);
		}
		pid[i] = fork();
		if (pid[i] == 0) // figlio
				{
			for (int j = 0; j <= i; j++)
				close(fdpipe[j][WRITE]);
			counto=0;
			while ((read(fdpipe[i][READ], &a, sizeof(char))) > 0) {
				if(a=='\n')
				{
					counto++;
					if(counto==TOP)
					{
						printf("[%d]: numero linee: %d\n",getpid(),counto);
						kill(pid0,SIGUSR1);
						exit(0);
					}
				}
			}
		} else if (pid[i] > 0) // padre
				{
			printf("[%d]: Figlio %d creato con pid:%d\n",getpid(),i+1,pid[i]);
			close(fdpipe[i][READ]);
		} else {
			fprintf(stderr, "errore nella fork\n");
			exit(EXIT_FAILURE);
		}
	}
	signal(SIGUSR1,handlerp);
	i = 0;
	char c;
	int count = 0, index;
	while ((read(fd, &buff[i], sizeof(char))) > 0) {
		if (i == 0) {
			c=buff[i];
			count = 1;
			printf("%c",buff[i]);
		} else {
			printf("%c",buff[i]);
			if (buff[i] == '\n') {
				buff[i + 1] = '\0';
				 {
					if ((count > 0) && (count <= M / 4))
						index = 0;
					if ((count > M / 4) && (count <= M / 2))
						index = 1;
					if ((count > M / 2) && (count <= M / 4 * 3))
						index = 2;
					if ((count > M / 4 * 3) && (count <= M))
						index = 3;
					printf("[%d]: invio stringa: %s al figlio %d",getpid(),buff,index+1);
					if ((write(fdpipe[index][WRITE], &buff,strlen(buff) * sizeof(char))) < 0) {
						fprintf(stderr, "Errore nella scrittura sulla pipe");
						exit(EXIT_FAILURE);
					}
				}
				i = 0;
			}
			else{
				if(buff[i] == c)
				{
					count++;
				}
			}
		}
	}
	close(fd);
	pause();
	printf("[%d]: Fine esecuzione\n", getpid());
	return 0;
}

void handlerp(int sig) {
	int status;
	wait(&status);
			if (WIFEXITED(status)) {
						printf("[%d]: Figlio terminato volontariamente con stato: %d\n",getpid(),
								WEXITSTATUS(status));
					} else if (WIFSIGNALED(status)) {
						printf("[%d]: Figlio terminato volontariamente con stato: %d\n",getpid(),
								WEXITSTATUS(status));
					}
	printf("[%d]: Terminazione programma\n",getpid());
	for(i=0;i<4;i++)
		close(fdpipe[i][WRITE]);
	kill(0,SIGKILL);
	return;
}
