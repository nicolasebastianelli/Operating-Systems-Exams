#include <fcntl.h>
#include <stdio.h>
#include <unistd.h>
#include <signal.h>
#include <stdlib.h>
#include <string.h>
#include <sys/wait.h>
#include <time.h>

#define READ 0
#define WRITE 1

void handlerf(int sig);
void handlerp(int sig);
char comando[100];

int main(int argc, char* argv[]) {
	printf("Inizio esecuzione\n");
	char cstop, cecc, buff;
	int fd1, fdp[2], pid1, pid0,status;
	if (argc != 5) {
		fprintf(stderr, "Numero di argomenti errato\n");
		exit(EXIT_FAILURE);
	}
	if (strlen(argv[3]) != 1) {
		fprintf(stderr, "cstop non è un carattere\n");
		exit(EXIT_FAILURE);
	}
	if (strlen(argv[4]) != 1) {
		fprintf(stderr, "cecc non è un carattere\n");
		exit(EXIT_FAILURE);
	}
	cstop = argv[3];
	strcpy(comando, argv[2]);
	cecc = argv[4];
	if (pipe(fdp) != 0) {
		fprintf(stderr, "errore nella creazione della pipe\n");
		exit(EXIT_FAILURE);
	}
	pid0 = getpid();
	pid1 = fork();
	if (pid1 == 0) // figlio
			{
		signal(SIGUSR1, handlerf);
		close(fdp[READ]);
		if ((fd1 = open(argv[1], O_RDONLY)) < 0) {
			fprintf(stderr, "errore nell'apertura di f da parte di P1\n");
			exit(EXIT_FAILURE);
		}
		while ((read(fd1, &buff, sizeof(char))) > 0) {
			if ((write(fdp[WRITE], &buff, sizeof(char))) < 0) {
				fprintf(stderr, "Errore nella scrittura sulla pipe");
				exit(EXIT_FAILURE);
			}
		}
	} else if (pid1 > 0) //padre
			{
		signal(SIGQUIT,handlerp);
		close(fdp[WRITE]);
		while ((read(fdp[READ], &buff, sizeof(char))) > 0) {
			if (buff != cecc && buff != cstop)
				printf("%c",buff);
			else if(buff== cecc)
			{
				kill(pid1,SIGUSR1);
				break;
			}
			else{
				kill(pid0,SIGQUIT);
			}
		}
		wait(&status);
		if (WIFEXITED(status)) {
					printf("[%d]:Figlio terminato volontariamente con stato: %d\n",getpid(),
							WEXITSTATUS(status));
				} else if (WIFSIGNALED(status)) {
					printf("[%d]:Figlio terminato volontariamente con stato: %d\n",getpid(),
							WEXITSTATUS(status));
				}
	} else {
		fprintf(stderr, "errore nella fork\n");
		exit(EXIT_FAILURE);
	}
	printf("[%d]:Fine esecuzione\n",getpid());
	return 0;
}

void handlerf(int sig) {
	char esec[100];
	strcat(esec, "./");
	strcat(esec, comando);
	execlp("./", esec, (char*) 0);
	exit(0);
}
void handlerp(int sig) {
	printf("Terminazione forzata da cstop\n");
	kill(0,SIGKILL);
}
