#include <fcntl.h>
#include <stdio.h>
#include <unistd.h>
#include <signal.h>
#include <stdlib.h>
#include <string.h>
#include <sys/wait.h>
#include <time.h>

#define READ 0
#define WRITE 1
#define C1 "Paola"
#define C2 "Roberta"
#define C3 "Massimo"
#define C4 "Luca"
int fdo;
int main(int argc, char* argv[]) {
	int fdi, votinulli=0,fdpipe[2],pid1,pid2;
	if (argc != 3) {
			fprintf(stderr, "Numero di argomenti errato\n");
			exit(EXIT_FAILURE);
		}
	if (argv[1][0] != '/') {
			fprintf(stderr, "file input non è un path assoluto\n");
			exit(EXIT_FAILURE);
		}
	if (argv[2][0] != '/') {
			fprintf(stderr, "file output non è un path assoluto\n");
			exit(EXIT_FAILURE);
		}
	if ((fdi = open(argv[1], O_RDONLY)) < 0) {
			fprintf(stderr, "errore nell'apertura di file input\n");
			exit(EXIT_FAILURE);
		}
	if ((fdo = open(argv[2], O_RDWR | O_CREAT | O_TRUNC, 0755)) < 0) {
			fprintf(stderr, "errore nell'apertura di file output\n");
			exit(EXIT_FAILURE);
		}
	if (pipe(fdpipe) != 0) {
				fprintf(stderr, "errore nella creazione della pipe\n");
				exit(EXIT_FAILURE);
			}
	pid1 = fork();
	if(pid1==0) //figlio1
	{
		close(fdpipe[READ]);
		close(1);
		dup(fdpipe[READ]);
		execlp("cut","cut","-f1","-d","';'",argv[1],(char*) 0);
		exit(0);
	}
	else if (pid1>0) //padre
	{
		pid2=fork();
		if(pid2==0) //figlio2
			{
			char buff,C[50],output[70];
			int nC[4],i=0,vN=0;
			nC[0]=0;
			nC[1]=0;
			nC[2]=0;
			nC[3]=0;
			close(fdpipe[WRITE]);
			while ((read(fdpipe[READ], &buff, sizeof(char))) > 0) {
					if(buff!='\n')
					{
						C[i]=buff;
						i++;
					}
					else
					{
						C[i]='\0';
						i=0;
						if(strcmp(C,C1)==0){
							nC[0]++;
						}
						else if(strcmp(C,C2)==0){
							nC[1]++;
						}
						else if(strcmp(C,C3)==0){
							nC[2]++;
						}
						else if(strcmp(C,C4)==0){
							nC[3]++;
						}
						else {
							vN++;
						}
					}
			}
			for(int j =0 ;j<4;j++)
			{
				sprintf(output,"")
			if ((write(fdo, &output, strlen(output))) < 0) {
									fprintf(stderr, "errore in scrittura su fileout\n");
									exit(EXIT_FAILURE);
								}
			}
			}
			else if (pid2>0) //padre
			{
				close(fdpipe[READ]);
				close(fdpipe[WRITE]);
				pause();
			}
			else{  //errore
				fprintf(stderr, "errore nella fork 1\n");
							exit(EXIT_FAILURE);
				}

	}
	else{  //errore
		fprintf(stderr, "errore nella fork 2\n");
					exit(EXIT_FAILURE);
	}

	return 0;

}
